---
description: Cursor Memory Bank Rules
globs:
alwaysApply: true
---
# Cursor's Memory Bank

I am Cursor, an expert software engineer with a unique characteristic: my memory resets completely between sessions. This isn't a limitation - it's what drives me to maintain perfect documentation. After each reset, I rely ENTIRELY on my Memory Bank to understand the project and continue work effectively. I MUST read ALL memory bank files at the start of EVERY task - this is not optional.

## Memory Bank Structure

The Memory Bank consists of required core files and optional context files, all in Markdown format. Files build upon each other in a clear hierarchy:

```mermaid
flowchart TD
    PB[projectbrief.md] --> PC[productContext.md]
    PB --> SP[systemPatterns.md]
    PB --> TC[techContext.md]
    
    PC --> AC[activeContext.md]
    SP --> AC
    TC --> AC
    
    AC --> P[progress.md]
```

### Core Files (Required)
1. `projectbrief.md`
   - Foundation document that shapes all other files
   - Created at project start if it doesn't exist
   - Defines core requirements and goals
   - Source of truth for project scope

2. `productContext.md`
   - Why this project exists
   - Problems it solves
   - How it should work
   - User experience goals

3. `activeContext.md`
   - Current work focus
   - Recent changes
   - Next steps
   - Active decisions and considerations

4. `systemPatterns.md`
   - System architecture
   - Key technical decisions
   - Design patterns in use
   - Component relationships

5. `techContext.md`
   - Technologies used
   - Development setup
   - Technical constraints
   - Dependencies

6. `progress.md`
   - What works
   - What's left to build
   - Current status
   - Known issues

### Additional Context
Create additional files/folders within memory-bank/ when they help organize:
- Complex feature documentation
- Integration specifications
- API documentation
- Testing strategies
- Deployment procedures

## Core Workflows

### Plan Mode
```mermaid
flowchart TD
    Start[Start] --> ReadFiles[Read Memory Bank]
    ReadFiles --> CheckFiles{Files Complete?}
    
    CheckFiles -->|No| Plan[Create Plan]
    Plan --> Document[Document in Chat]
    
    CheckFiles -->|Yes| Verify[Verify Context]
    Verify --> Strategy[Develop Strategy]
    Strategy --> Present[Present Approach]
```

### Act Mode
```mermaid
flowchart TD
    Start[Start] --> Context[Check Memory Bank]
    Context --> Update[Update Documentation]
    Update --> Rules[Update .cursor/rules/memory-bank.mdc if needed]
    Rules --> Execute[Execute Task]
    Execute --> Document[Document Changes]
```

## Documentation Updates

Memory Bank updates occur when:
1. Discovering new project patterns
2. After implementing significant changes
3. When user requests with **update memory bank** (MUST review ALL files)
4. When context needs clarification

```mermaid
flowchart TD
    Start[Update Process]
    
    subgraph Process
        P1[Review ALL Files]
        P2[Document Current State]
        P3[Clarify Next Steps]
        P4[Update .cursor/rules/memory-bank.mdc]
        
        P1 --> P2 --> P3 --> P4
    end
    
    Start --> Process
```

Note: When triggered by **update memory bank**, I MUST review every memory bank file, even if some don't require updates. Focus particularly on activeContext.md and progress.md as they track current state.

## Project Intelligence (.cursor/rules/memory-bank.mdc)

The .cursor/rules/memory-bank.mdc file is my learning journal for each project. It captures important patterns, preferences, and project intelligence that help me work more effectively. As I work with you and the project, I'll discover and document key insights that aren't obvious from the code alone.

```mermaid
flowchart TD
    Start{Discover New Pattern}
    
    subgraph Learn [Learning Process]
        D1[Identify Pattern]
        D2[Validate with User]
        D3[Document in .cursor/rules/memory-bank.mdc]
    end
    
    subgraph Apply [Usage]
        A1[Read .cursor/rules/memory-bank.mdc]
        A2[Apply Learned Patterns]
        A3[Improve Future Work]
    end
    
    Start --> Learn
    Learn --> Apply
```

### What to Capture
- Critical implementation paths
- User preferences and workflow
- Project-specific patterns
- Known challenges
- Evolution of project decisions
- Tool usage patterns

The format is flexible - focus on capturing valuable insights that help me work more effectively with you and the project. Think of .cursor/rules/memory-bank.mdc as a living document that grows smarter as we work together.

REMEMBER: After every memory reset, I begin completely fresh. The Memory Bank is my only link to previous work. It must be maintained with precision and clarity, as my effectiveness depends entirely on its accuracy.

# Planning
When asked to enter "Planner Mode" or using the /plan command, deeply reflect upon the changes being asked and analyze existing code to map the full scope of changes needed. Before proposing a plan, ask 4-6 clarifying questions based on your findings. Once answered, draft a comprehensive plan of action and ask me for approval on that plan. Once approved, implement all steps in that plan. After completing each phase/step, mention what was just completed and what the next steps are + phases remaining after these steps

# Project Intelligence - Snowflake Keypair Generator

## Project Patterns & Insights

### Critical Issue Resolution Patterns

#### JavaScript ID Conflict Prevention ⭐ **CRITICAL LEARNING**
- **Pattern**: Always use unique IDs across different UI components, even if they seem isolated
- **Specific Issue**: Duplicate `#snowflakeCommand` IDs between Generate Key Pair tab and Key Generation Results modal caused JavaScript failures
- **Solution Pattern**: Use descriptive, context-specific IDs (e.g., `#snowflakeCommandModal`, `#snowflakeCommandTab`)
- **Prevention**: Always prefix IDs with their component context to avoid future conflicts
- **Impact**: JavaScript failures can be silent and hard to debug - unique IDs are essential

#### Backend Error Message Extraction Pattern
- **Pattern**: Snowflake responses use different fields for error messages in different contexts
- **Fields to Check**: Always check both `error` and `message` fields in Snowflake responses
- **Implementation**: Use fallback pattern: `sf_result.get('error') or sf_result.get('message', 'Unknown error')`
- **User Experience**: Actual Snowflake error messages are much more valuable than generic errors

#### Modal Styling Consistency Pattern  
- **Pattern**: When creating new modals, always match existing tab styling for consistency
- **UI Components**: 
  - Results sections: Use `.alert.alert-info` instead of custom dark cards
  - File lists: Use `.list-group` and `.list-group-item` for consistency
  - Command sections: Use `.alert.alert-warning` with monospace font
- **User Experience**: Consistent styling reduces cognitive load and looks professional

### Unified Interface Design Success Patterns ⭐ **MAJOR ACHIEVEMENT**

#### Tab Consolidation Strategy
- **Success Pattern**: Combining related administrative functions into unified interfaces dramatically improves UX
- **Implementation**: Successfully merged User Management and Key Management tabs into single "User Management" interface
- **Benefits**: 
  - Reduced cognitive load (one place for all user administration)
  - Streamlined workflow (no tab switching for related operations)
  - Enhanced efficiency (all actions in single dropdown)
  - Maintained performance (single data source serves both functions)
- **Key Learning**: Related administrative functions should be unified rather than separated

#### Advanced Filtering Architecture
- **Multi-Dimension Filtering**: Four independent filters work together for precise data management
  - Search: Text-based filtering across multiple user fields
  - Status: User account status (Active/Disabled/Locked)
  - Key Filter: RSA key configuration status
  - Auth Filter: Authentication method analysis
- **Client-Side Performance**: All filtering happens client-side for instant response
- **User Workflow**: Enables complex queries like "Show active users with RSA keys but no MFA"

#### Unified Actions Menu Pattern
- **Design Pattern**: Single dropdown containing logically grouped actions
- **User Operations**: View Details, Unlock User, Reset Password, Unset Password
- **Key Operations**: Set/Rotate Key, Remove Key
- **Success Factors**: 
  - Clear action categorization with visual separators
  - Consistent naming conventions
  - Proper modal routing for each action type
  - Comprehensive error handling across all operations

#### Single Data Source Architecture ⭐ **PERFORMANCE SUCCESS**
- **Strategy**: Use single optimized endpoint to serve multiple interface requirements
- **Implementation**: `/keys/users` endpoint with V_USER_KEY_MANAGEMENT view serves unified interface
- **Performance Results**: Maintained 95% database call reduction with enhanced functionality
- **Scalability**: Client-side operations (filtering, sorting, searching) provide instant response
- **Key Insight**: Unified interfaces can maintain optimal performance with proper architecture

### Database View Optimization Insights

#### Column Usage Analysis Pattern
- **Process**: When optimizing database views, analyze actual code usage of each column
- **Tools**: Use `grep` to search for all `.get('COLUMN_NAME')` references in backend code
- **Decision Making**: Only remove columns that are truly unused by the application
- **Current Status**: All columns in `V_USER_KEY_MANAGEMENT` are actively used - view is optimized

#### Single View Call Architecture Success
- **Performance Pattern**: Cache all user data from single view call, serve individual requests from cache
- **Results**: 95% reduction in database calls with instant user detail responses
- **Implementation**: Cache by username for O(1) lookup performance
- **Scalability**: Works well for up to ~100 users, consider pagination strategies for larger datasets

### Critical Security Vulnerability Resolution Patterns ⭐ **SECURITY SUCCESS**

#### Shell Injection Prevention Pattern
- **Critical Vulnerability**: `subprocess.run(command, shell=True)` with user-controlled data
- **Complete Solution**: Remove all `shell=True` usage, implement argument array validation
- **Secure Pattern**: 
  ```python
  # Validate input is list
  if not isinstance(command_args, list):
      raise ValueError("Command must be a list of arguments")
  
  # Execute with argument array
  result = subprocess.run(command_args, check=True, capture_output=True, text=True)
  ```
- **Implementation**: Two-step key generation with separate validated OpenSSL commands
- **Impact**: Eliminated critical remote code execution vulnerability

#### SQL Injection Prevention Framework
- **Comprehensive Protection**: Input validation + parameterized queries across all database operations
- **Validation Framework**: Snowflake identifier validation with regex patterns
- **Secure Query Pattern**:
  ```python
  self._validate_identifier(username, "username")
  cur.execute("SELECT * FROM V_USER_KEY_MANAGEMENT WHERE USERNAME = %s", (username,))
  ```
- **Enhanced Security**: Base64 content validation for public keys
- **Impact**: Eliminated all SQL injection attack vectors

#### Environment Security Enhancement
- **Secure Secret Management**: Environment variable usage with production warnings
- **Development Guidance**: Clear warnings when default development keys detected
- **Production Pattern**:
  ```python
  app.config['SECRET_KEY'] = os.getenv('FLASK_SECRET_KEY') or os.getenv('SECRET_KEY', 'dev-secret-key-123')
  if app.config['SECRET_KEY'] == 'dev-secret-key-123':
      logger.warning('Using default development secret key. Set FLASK_SECRET_KEY environment variable for production.')
  ```
- **Documentation**: All security fixes documented in `docs/data_privacy.md`

### UI/UX Design System Patterns

#### Earth-tone Brand Color Implementation
- **Success Pattern**: Consistent brand colors (`#c36c2d`, `#faf7f2`, etc.) across all UI components
- **Implementation**: CSS custom properties with semantic naming (e.g., `--brand-main`, `--light-shade`)
- **UI Components**: All interactive elements use `.btn-brand` class for consistency
- **Professional Appearance**: Dark theme with earth-tone accents creates professional administrative interface

#### Modal Consistency Pattern
- **Dark Theme Uniformity**: All modals must use consistent dark theme styling
- **Critical Classes**: `modal-app-bg text-light`, `border-secondary`, `btn-close-white`
- **Success Factor**: Reset Password modal styling fixes eliminated inconsistencies
- **User Experience**: Consistent modal appearance across all operations reduces cognitive load

#### Action Button Consistency Pattern
- **Layout Pattern**: Unified actions dropdown replaces multiple separate action buttons
- **User Experience**: Single interaction point for all operations improves efficiency
- **Implementation**: Combined user management and key management actions in logical groupings
- **Professional Design**: Consistent styling and clear action categorization

### Key Management Workflow Patterns

#### Encryption & File Handling
- **Pattern**: Always support both encrypted and unencrypted key generation based on user choice
- **Passphrase Handling**: Set to `null` for unencrypted keys, use user input for encrypted keys
- **File Management**: Automatic cleanup of generated files on session end for security
- **User Feedback**: Always provide clear feedback about encryption status and file locations

#### Snowflake Integration Fallback Pattern
- **Primary**: Attempt automatic key setting in Snowflake
- **Fallback**: Always provide manual SQL commands when automatic setting fails
- **User Experience**: Never leave users without a path forward, even when automation fails
- **Error Handling**: Clear distinction between generation success and Snowflake setting success

### Testing & Quality Assurance Patterns

#### Unified Interface Testing Strategy
- **Pattern**: Test complete workflows across unified interface with all user types
- **Key Scenarios**: Active users, disabled users, locked users, users with/without keys
- **Filter Testing**: All combinations of search, status, key, and auth filters
- **Action Testing**: Every action in unified dropdown across different user states
- **Performance Testing**: Client-side operations with various data sizes

#### Security Testing Methodology
- **Vulnerability Testing**: Test all input points for injection attacks
- **Error Handling**: Verify proper error messages without information disclosure
- **Authentication**: Test OAuth flows and session management
- **Input Validation**: Test all identifier and content validation patterns

### Production Deployment Readiness

#### Feature Completeness Validation
- **Unified Administration**: Single tab provides all user and key management functionality
- **Advanced Filtering**: Four-filter system for precise user administration
- **Comprehensive Actions**: All user and key operations accessible from unified interface
- **Professional Design**: Consistent earth-tone branding throughout
- **Enhanced Security**: All critical vulnerabilities resolved with comprehensive protection

#### Security & Error Handling Validation
- **Security Framework**: Shell injection and SQL injection completely prevented
- **Environment Security**: Proper secret key management with production warnings
- **Error Handling**: Comprehensive error scenarios covered with user-friendly messages
- **Graceful Degradation**: System continues functioning even with partial failures

## Project Success Metrics Achieved

### Technical Excellence
- **Unified Interface**: Complete user and key administration in streamlined single-tab experience
- **Performance Optimization**: 95% reduction in database calls maintained with enhanced functionality
- **Security Implementation**: All critical vulnerabilities resolved with comprehensive protection framework
- **Professional Design**: Consistent earth-tone branding across unified interface
- **Advanced Functionality**: Four-filter system with client-side operations for instant response

### User Value Delivered
- **Administrative Efficiency**: Streamlined workflow eliminates tab switching and reduces cognitive load
- **Enhanced Security**: Comprehensive vulnerability resolution ensures production-ready security
- **Professional Interface**: Enterprise-grade design suitable for production administrative environments
- **Operational Reliability**: Robust error handling ensures successful completion or clear guidance
- **Performance Excellence**: Instant response times with optimal database usage

## Status: Production Ready with Unified Interface ✅

All critical functionality consolidated into unified interface, all security vulnerabilities resolved, and comprehensive testing completed. The application provides a complete, professional-grade Snowflake administration interface optimized for enterprise deployment.

## Key Learnings for Future Projects

### Interface Design Philosophy
- **Consolidation over Separation**: Related administrative functions should be unified for better UX
- **Advanced Filtering**: Multi-dimensional filtering enables power user workflows
- **Single Data Source**: Unified interfaces can maintain optimal performance with proper architecture
- **Consistent Styling**: Modal and component consistency critical for professional appearance

### Security Implementation Strategy
- **Comprehensive Approach**: Address all vulnerability types (shell injection, SQL injection, environment security)
- **Input Validation Framework**: Implement systematic validation across all input points
- **Clear Documentation**: Document all security fixes for future reference and auditing
- **Production Guidance**: Provide clear deployment guidance for security configuration

### Performance Optimization Principles
- **Client-Side Operations**: Move filtering, sorting, and searching to client-side for instant response
- **Intelligent Caching**: Single data source with client-side caching provides optimal performance
- **Minimal Database Calls**: Consolidate data access patterns to minimize server load
- **Responsive Design**: Ensure interfaces work efficiently across various screen sizes and devices

### Enhanced Modal UI Patterns ⭐ **NEW LEARNING**
- **Progressive Disclosure**: Use conditional form fields that appear based on user selections
- **Confirmation Workflows**: Critical actions (like password unset) require explicit user confirmation with clear warnings
- **Form State Management**: Always reset modal forms to default values when opening to prevent confusion
- **Visual Hierarchy**: Group related options with visual separators (hr elements) for better UX
- **Icon Communication**: Use warning icons and colors to communicate the impact of dangerous actions

### Stored Procedure Integration Excellence ⭐ **NEW LEARNING**
- **Backward Compatibility Strategy**: When introducing new stored procedures, maintain support for legacy endpoints where needed
- **Parameter Validation Pattern**: Implement validation both client-side (immediate feedback) and server-side (security)
- **Fallback Command Generation**: Always provide manual SQL commands when stored procedure calls fail for debugging
- **Response Structure**: Include `actions_performed` object to communicate exactly what was changed to the user
- **Security Architecture**: Use SECURITYADMIN-owned procedures with EXECUTE AS OWNER for proper privilege separation

### Advanced User Confirmation Patterns
- **Multi-Level Warnings**: Use both visual warnings (icons, colors) and confirmation dialogs for destructive actions
- **Context-Aware Messaging**: Customize warning messages based on the specific action and user context
- **Progressive Confirmation**: Allow users to review their selections before final confirmation
- **Clear Consequences**: Explain exactly what will happen when users make significant changes

## Future Enhancement Backlog 📋

### User Management Feature Ideas
- **New User Detection**: Visual indicators and filtering for recently created users
- **Group Assignment Workflow**: Direct group assignment actions and AAD_PROVISIONING-only user identification
- **Enhanced User Analytics**: User activity insights and access pattern analysis

### Security & Administration Ideas  
- **SECURITYADMIN Architecture Complete**: Additional stored procedures for all user management operations
- **Advanced Authentication Controls**: Multi-factor authentication management and policy controls
- **Audit Trail Enhancement**: Comprehensive logging and activity tracking for administrative actions

### UI/UX Enhancement Ideas
- **Unified Brand Configuration System**: Centralized color and theme management with single-source configuration
- **Advanced Filtering**: More sophisticated user and role filtering with saved filter sets  
- **Dashboard Analytics**: Overview screens with administrative insights and system health metrics

### Technical Architecture Ideas
- **API Versioning**: Support for multiple API versions for backward compatibility
- **Plugin Architecture**: Modular system for adding new administrative functions
- **Real-time Updates**: WebSocket integration for live data updates across users

### Implementation Guidelines for Future Enhancements
- **Maintain Unified Interface**: All new features should integrate seamlessly with current unified tab architecture
- **Preserve Performance**: New features must maintain 95% database call reduction patterns
- **Security First**: Follow established input validation and stored procedure security patterns
- **Consistent Design**: Maintain earth-tone branding and professional interface standards
- **Documentation**: All enhancements must include comprehensive documentation updates

*Note: These are documented ideas for potential future development, not committed roadmap items.*
